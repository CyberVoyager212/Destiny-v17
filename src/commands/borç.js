const moment = require("moment-timezone");
const emojis = require("../emoji.json");

function chooseEmoji(amount) {
  if (amount > 100000) return emojis.money.high;
  if (amount > 10000) return emojis.money.medium;
  return emojis.money.low;
}

exports.execute = async (client, message, args) => {
  const userId = message.author.id;

  if (!args[0] || isNaN(args[0]) || parseInt(args[0]) <= 0) {
    return message.reply(
      `${emojis.bot.error} | Oof! LÃ¼tfen geÃ§erli bir sayÄ± gir ğŸ˜– SÄ±fÄ±r veya negatif rakamlar geÃ§erli deÄŸil~`
    );
  }

  const borrowAmount = parseInt(args[0]);
  const userCredit = (await client.db.get(`credit_${userId}`)) || 100;
  const existingLoan = (await client.db.get(`loan_${userId}`)) || {
    amount: 0,
    time: null,
  };

  const maxLoan = userCredit * 1000;

  if (existingLoan.amount > 0) {
    return message.reply(
      `${emojis.bot.error} | Hups! Mevcut borcun var ğŸ˜µ Ã–nce onu Ã¶de, sonra yeni borÃ§ alabilirsin~`
    );
  }

  if (borrowAmount > maxLoan) {
    return message.reply(
      `${emojis.bot.error} | Aman dikkat! Maksimum Ã§ekebileceÄŸin miktar **${maxLoan}** ${chooseEmoji(
        maxLoan
      )} ğŸ˜³ Bu rakamÄ± aÅŸamazsÄ±n~`
    );
  }

  await client.db.set(`loan_${userId}`, {
    amount: borrowAmount,
    time: moment().tz("Europe/Istanbul").format(),
  });

  await client.eco.addMoney(userId, borrowAmount);

  let creditScore = userCredit;
  if (borrowAmount >= 100000) creditScore -= 10;
  else if (borrowAmount >= 50000) creditScore -= 5;

  await client.db.set(`credit_${userId}`, creditScore);

  return message.reply(
    `${emojis.bot.succes} | Tebrikler! **${borrowAmount}** ${chooseEmoji(
      borrowAmount
    )} baÅŸarÄ±yla hesabÄ±na eklendi âœ¨\n` +
      `Kredi puanÄ±n ÅŸimdi: **${creditScore}** ğŸ’–\n` +
      `Borcunu zamanÄ±nda Ã¶demeyi unutma, yoksa botu kullanamayabilirsin~ ğŸ˜µ`
  );
};

exports.help = {
  name: "paraÃ§ek",
  aliases: [],
  usage: "paraÃ§ek <miktar>",
  description:
    "BorÃ§ alarak bakiyeni artÄ±rÄ±rsÄ±n. Kredi puanÄ±na gÃ¶re maksimum Ã§ekebileceÄŸin miktar deÄŸiÅŸir.",
  category: "Ekonomi",
  cooldown: 30,
};
